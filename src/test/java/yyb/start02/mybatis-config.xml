<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    属性：这些属性都是可外部配置且可动态替换的，
          既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。
          然后其中的属性就可以在整个配置文件中被用来替换需要动态配置的属性值。
          比如在dataSource 节点中的使用。
          属性也可以被传递到 SqlSessionFactoryBuilder.build()方法中。

          如果属性在不只一个地方进行了配置，那么 MyBatis 将按照下面的顺序来加载：

          1. 在 properties 元素体内指定的属性首先被读取。

          2. 然后根据 properties 元素中的 resource 属性读取类路径下属性文件或根据 url 属性指定的路径读取属性文件，并覆盖已读取的同名属性。
          3. 最后读取作为方法参数传递的属性，并覆盖已读取的同名属性。

          因此，通过方法参数传递的属性具有最高优先级，resource/url 属性中指定的配置文件次之，最低优先级的是 properties 属性中指定的属性。

    -->
    <properties resource="prop.properties">
        <property name="username" value="dev_user"/>
        <property name="password" value="F2Fa3!33TYyg"/>
        <!--
        从 MyBatis 3.4.2 开始，你可以为占位符指定一个默认值。例如：如果属性 'username' 没有被配置，'username' 属性的值将为 'ut_user'
        <property name="username" value="${username:ut_user}"/>
       这个特性默认是关闭的。如果你想为占位符指定一个默认值， 你应该添加一个指定的属性来开启这个特性。
       <property name="org.apache.ibatis.parsing.PropertyParser.enable-default-value" value="true"/>
        如果你已经使用 ":" 作为属性的键（如：db:username），可以修改默认值的分隔符
        <property name="org.apache.ibatis.parsing.PropertyParser.default-value-separator" value="?:"/>
        修改后的使用方式
        <property name="username" value="${db:username?:ut_user}"/>
        -->
    </properties>
    <!--settings是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项的意图、默认值等。
    一个配置完整的 settings 元素的示例如下：-->
    <settings>
        <!--全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存。默认true -->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。默认false -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--当开启时，任何方法的调用都会加载该对象的所有属性。 否则，每个属性会按需加载（参考 lazyLoadTriggerMethods)。默认false（在 3.4.1 及之前的版本默认值为 true）-->
        <setting name="aggressiveLazyLoading" value="true"/>
        <!--是否允许单一语句返回多结果集（需要驱动支持）。默认true-->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!--使用列标签代替列名。不同的驱动在这方面会有不同的表现，具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。默认true-->
        <setting name="useColumnLabel" value="true"/>
        <!--允许 JDBC 支持自动生成主键，需要驱动支持。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能支持但仍可正常工作（比如 Derby）。默认false-->
        <setting name="useGeneratedKeys" value="false"/>
        <!--指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示取消自动映射；PARTIAL 只会自动映射没有定义嵌套结果集映射的结果集。 FULL 会自动映射任意复杂的结果集（无论是否嵌套）。默认PARTIAL-->
        <setting name="autoMappingBehavior" value="PARTIAL"/>
        <!--
        指定发现自动映射目标未知列（或者未知属性类型）的行为。
        NONE: 不做任何反应
        WARNING: 输出提醒日志 ('org.apache.ibatis.session.AutoMappingUnknownColumnBehavior' 的日志等级必须设置为 WARN)
        FAILING: 映射失败 (抛出 SqlSessionException),默认值为NONE
        -->
        <setting name="autoMappingUnknownColumnBehavior" value="WARNING"/>
        <!--配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（prepared statements）； BATCH 执行器将重用语句并执行批量更新。
            默认为SIMPLE
        -->
        <setting name="defaultExecutorType" value="SIMPLE"/>
        <!--设置超时时间，它决定驱动等待数据库响应的秒数。默认	未设置 (null)-->
        <setting name="defaultStatementTimeout" value="25"/>
        <!--为驱动的结果集获取数量（fetchSize）设置一个提示值。此参数只可以在查询设置中被覆盖。默认	未设置 (null)-->
        <setting name="defaultFetchSize" value="100"/>
        <!--允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。默认为	False-->
        <setting name="safeRowBoundsEnabled" value="false"/>
        <!--允许在嵌套语句中使用分页（ResultHandler）。如果允许使用则设置为 false。默认为 TRUE-->
        <setting name="safeResultHandlerEnabled" value="false"/>
        <!--是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。默认为	False-->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
        <!--MyBatis 利用本地缓存机制（Local Cache）防止循环引用（circular references）和加速重复嵌套查询。 默认值为 SESSION，这种情况下会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地会话仅用在语句执行上，对相同 SqlSession 的不同调用将不会共享数据。-->
        <setting name="localCacheScope" value="SESSION"/>
        <!--当没有为参数提供特定的 JDBC 类型时，为空值指定 JDBC 类型。 某些驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。默认OTHER-->
        <setting name="jdbcTypeForNull" value="OTHER"/>
        <!--指定哪个对象的方法触发一次延迟加载。默认equals,clone,hashCode,toString-->
        <setting name="lazyLoadTriggerMethods" value="equals,clone,hashCode,toString"/>
        <!--指定动态 SQL 生成的默认语言。-->
        <setting name="defaultScriptingLanguage" value="org.apache.ibatis.scripting.xmltags.XMLLanguageDriver"/>
        <!--指定 Enum 使用的默认 TypeHandler 。（新增于 3.4.5）-->
        <setting name="defaultEnumTypeHandler" value="org.apache.ibatis.type.EnumTypeHandler"/>
        <!--指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值初始化的时候比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。-->
        <setting name="callSettersOnNulls" value="false"/>
        <!--当返回行的所有列都是空时，MyBatis默认返回 null。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集 （如集合或关联）。（新增于 3.4.2）,默认false-->
        <setting name="returnInstanceForEmptyRow" value="false"/>
        <!--指定 MyBatis 增加到日志名称的前缀。默认为 未设置-->
        <setting name="logPrefix" value="aa"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。默认为未设置-->
        <setting name="logImpl" value="LOG4J"/>
        <!--指定 Mybatis 创建具有延迟加载能力的对象所用到的代理工具。默认JAVASSIST （MyBatis 3.3 以上）-->
        <setting name="proxyFactory" value="JAVASSIST"/>
        <!--指定 VFS 的实现，自定义 VFS 的实现的类全限定名，以逗号分隔。默认未设置-->
        <setting name="vfsImpl" value=""/>
        <!--允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 -parameters 选项。（新增于 3.4.1），默认为true-->
        <setting name="useActualParamName" value="true"/>
        <!--指定一个提供 Configuration 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为static Configuration getConfiguration() 的方法。（新增于 3.2.3），默认	未设置-->
        <setting name="configurationFactory" value=""/>
    </settings>
    <!--类型别名是为 Java 类型设置一个短的名字。 它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如：-->
    <typeAliases>
        <typeAlias alias="Author" type="yyb.model.Author"/>
        <typeAlias alias="Blog" type="yyb.model.Blog"/>
        <typeAlias alias="Comment" type="yyb.model.Comment"/>
        <typeAlias alias="Post" type="yyb.model.Post"/>
        <typeAlias alias="Section" type="yyb.model.Section"/>
        <typeAlias alias="Tag" type="yyb.model.Tag"/>
        <!--当这样配置时，Blog 可以用在任何使用 domain.blog.Blog 的地方。-->
    </typeAliases>
    <!--
        也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：
        <typeAliases>
            <package name="domain.blog"/>
        </typeAliases>
        每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。见下面的例子：
        @Alias("author")
        public class Author {
            ...
        }
        还有一些为常见的 Java 类型内建的相应的类型别名。它们都是不区分大小写的，注意对基本类型名称重复采取的特殊命名风格。
    -->
    <!--
    让 MyBatis 为你查找类型处理器
    无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。mybatis已内置很多默认的类型处理器。-->
    <typeHandlers>
        <typeHandler handler="org.mybatis.example.ExampleTypeHandler"/>
    </typeHandlers>
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="yyb/start01/BlogMapper.xml"/>
    </mappers>
</configuration>