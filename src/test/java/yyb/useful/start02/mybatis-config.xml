<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <properties resource="prop.properties">
        <property name="username" value="dev_user"/>
        <property name="password" value="F2Fa3!33TYyg"/>
    </properties>
    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>
    <typeAliases>
        <typeAlias alias="Author" type="yyb.model.Author"/>
        <typeAlias alias="Blog" type="yyb.model.Blog"/>
    </typeAliases>
    <typeHandlers>
        <typeHandler handler="yyb.useful.start02.ExampleTypeHandler"/>
    </typeHandlers>
    <objectFactory type="yyb.useful.start02.ExampleObjectFactory">
        <property name="someProperty" value="100"/>
    </objectFactory>
    <plugins>
        <plugin interceptor="yyb.useful.start02.ExamplePlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>
    <!--
    环境配置

    MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中，
    现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中 使用相同的 SQL 映射。有许多类似的使用场景。

    每个数据库对应一个 SqlSessionFactory 实例
    -->
    <!--
        默认使用的环境 ID（比如：default="development"）。
        默认的环境和环境 ID 是自解释的，因此一目了然。 你可以对环境随意命名，但一定要保证默认的环境 ID 要匹配其中一个环境 ID。
    -->
    <environments default="development">
        <!--每个 environment 元素定义的环境 ID（比如：id="development"）。-->
        <environment id="development">
            <!--
                事务管理器的配置（比如：type="JDBC"）
                在 MyBatis 中有两种类型的事务管理器（也就是 type=”[JDBC|MANAGED]”）：

                JDBC – 这个配置就是直接使用了 JDBC 的提交和回滚设置，它依赖于从数据源得到的连接来管理事务作用域。
                MANAGED – 这个配置几乎没做什么。它从来不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
                           默认情况下它会关闭连接，然而一些容器并不希望这样，因此需要将 closeConnection 属性设置为 false 来阻止它默认的关闭行为。例如:

                           <transactionManager type="MANAGED">
                              <property name="closeConnection" value="false"/>
                           </transactionManager>

              提示如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。

              这两种事务管理器类型都不需要设置任何属性。它们其实是类型别名，换句话说，你可以使用 TransactionFactory 接口的实现类的完全限定名或类型别名代替它们。
              public interface TransactionFactory {
                  void setProperties(Properties props);
                  Transaction newTransaction(Connection conn);
                  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);
                }
             -->
            <transactionManager type="JDBC">
                <property name="..." value="..."/>
            </transactionManager>
            <!--数据源的配置（比如：type="POOLED"）。-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
        <environment id="production">
            <transactionManager type="JDBC"></transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
        <environment id="production">
            <transactionManager type="yyb.useful.start02.ExampleTransactionFactory"></transactionManager>
            <dataSource type="UNPOOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <mapper resource="yyb/useful/start01/BlogMapper.xml"/>
    </mappers>
</configuration>